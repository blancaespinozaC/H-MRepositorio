#BORRADOR DEL MENÚ DEL DASHBOARD
#alicia rodriguez 10/06/2024


import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output
from mysql.connector import connect, Error
import pandas as pd
import Dashboard3 as dash3
import Dashboad1 as dash1
import Dashboard2 as dash2

app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP], suppress_callback_exceptions=True)

# Define el estilo del sidebar
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": 0,
    "left": 0,
    "bottom": 0,
    "width": "16rem",
    "padding": "3rem 1rem",
    "background-color": "#FFE0B5"
}

# Define el estilo del contenido principal
CONTENT_STYLE = {
    "margin-left": "18rem",
    "margin-right": "2rem",
    "padding": "2rem 1rem",

}

# Define el layout del sidebar
sidebar = html.Div(
    [
        html.H1("Proyecto Final", className="display-4", style={"font-family": "cursive", "color": "#D8AE7E"}),
        html.Hr(),
        html.P("Dashboard referente ala pagina de H&M", className="lead"),
        dbc.Nav(
            [
                dbc.NavLink("Home", href="/", active="exact",style={"font-family": "fantasy", "color": "#D8AE7E"}),
                dbc.NavLink("Dashboard 1", href="/dash-1", active="exact", style={"font-family": "fantasy", "color": "#D8AE7E"}),
                dbc.NavLink("Dashboard 2", href="/dash-2", active="exact", style={"font-family": "fantasy", "color": "#D8AE7E"}),
                dbc.NavLink("Dashboard 3", href="/dash-3", active="exact", style={"font-family": "fantasy", "color": "#D8AE7E"}),
                dbc.NavLink("Github", href="https://github.com/", target="_blank", active="exact", style={"font-family": "fantasy", "color": "#D8AE7E"})
            ],
            vertical=True,
            pills=True,
        ),
    ],
    style=SIDEBAR_STYLE,
)


content = html.Div(id="page-content", style=CONTENT_STYLE)
app.layout = html.Div([dcc.Location(id="url"), sidebar, content])

@app.callback(
    Output("page-content", "children"),
    [Input("url", "pathname")]
)
def render_page_content(pathname):
    if pathname == "/":
        return html.P(" Bienvenido a la página principal.\n""En las siguientes opciones se encuentra 3 diferentes dashboard "
                      "con informacion extraida de la pagina de H&M , es una es una empresa sueca de moda conocida por sus tiendas de ropa "
                      "y accesorios asequibles y modernos. Tienen una gran presencia "
                      "internacional y ofrecen una amplia gama de productos para hombres, mujeres y niños. ",style={"font-family": "cursive","background-color": "#FFF2D7"})
    elif pathname == "/dash-1":
        def conectar():
            try:
                conexiondb = connect(host="localhost", user="root", password="", database="HYM")
                return conexiondb
            except Error as e:
                print(e)
                return None

        def leerDatos(sql_query):
            conn = conectar()
            if conn is None:
                return pd.DataFrame()
            try:
                cursor = conn.cursor()
                cursor.execute(sql_query)
                data = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]
                cursor.close()
                conn.close()

                df = pd.DataFrame(data, columns=columns)
                return df
            except Error as e:
                print("Error leyendo datos desde MySQL:", e)
                return pd.DataFrame()
        sql_query = """
        SELECT p.Id_cate, c.NombreCate, p.Precios, p.NombrePro 
        FROM Productos p 
        JOIN Categorias c ON p.Id_cate = c.Id_cate
        """

        data = leerDatos(sql_query)
        return dash1.dash_layout(data)
    elif pathname == "/dash-2":
        def conectar():
            try:
                conexiondb = connect(host="localhost", user="root", password="", database="HYM")
                return conexiondb
            except Error as e:
                print(e)
                return None

        # Funcion para leer datos desde la base de datos
        def read_data_from_sql(sql_query):
            conn = conectar()
            if conn is None:
                return pd.DataFrame()  # Devolver un DataFrame vacio si la conexion falla
            try:
                cursor = conn.cursor()
                cursor.execute(sql_query)
                data = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]
                cursor.close()
                conn.close()

                df = pd.DataFrame(data, columns=columns)
                return df
            except Error as e:
                print("Error leyendo datos desde MySQL:", e)
                return pd.DataFrame()

        # Consulta SQL para obtener los datos
        sql_query = """
        SELECT p.Id_cate, c.NombreCate, p.Precios, p.NombrePro
        FROM Productos p
        JOIN Categorias c ON p.Id_cate = c.Id_cate
        WHERE (p.Id_cate, p.Precios) IN (
            SELECT Id_cate, MAX(Precios)
            FROM Productos
            GROUP BY Id_cate
        )
        """

        # Leer los datos desde la base de datos
        data = read_data_from_sql(sql_query)

        return dash2.dash_layout(data)
    elif pathname == "/dash-3":
        def conectar():
            try:
                conexiondb = connect(host="localhost", user="root", password="", database="HYM")
                return conexiondb
            except Error as e:
                print(e)
                return None

        # Función para leer datos desde la base de datos
        def read_data_from_sql(sql_query):
            conn = conectar()
            if conn is None:
                return pd.DataFrame()  # Devolver un DataFrame vacío si la conexión falla
            try:
                cursor = conn.cursor()
                cursor.execute(sql_query)
                data = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]
                cursor.close()
                conn.close()

                df = pd.DataFrame(data, columns=columns)
                return df
            except Error as e:
                print("Error leyendo datos desde MySQL:", e)
                return pd.DataFrame()

        # Consulta SQL para obtener los datos
        sql_query = """
        SELECT p.Id_cate, c.NombreCate, p.Precios, p.NombrePro 
        FROM Productos p 
        JOIN Categorias c ON p.Id_cate = c.Id_cate
        """

        # Leer los datos desde la base de datos
        data = read_data_from_sql(sql_query)

        return dash3.dash_layout(data)
    else:
        return html.Div(
            [
                html.H1("404: Not found", className="text-danger"),
                html.Hr(),
                html.P(f"The pathname {pathname} was not recognised..."),
            ],
            className="p-3 bg-light rounded-3",
        )

# Inicia la aplicación
if __name__ == "__main__":
    app.run_server(debug=True)
